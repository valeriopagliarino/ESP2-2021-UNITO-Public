# -*- coding: utf-8 -*-
"""Image processing interference ESP2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvxwxhZPZEK_HqYxTaMgcrxG4k2BAnKY
"""

!wget https://github.com/MohamedElashri/HEP-ML/releases/download/ROOT/ROOT.tar.zip
#Se questo ^^ non dovesse risultare esistente oppure modificato, ne esiste una copia sul LaCie D2 in Collegio
!unzip /content/ROOT.tar.zip
!tar -xf  ROOT.tar
!apt-get install git dpkg-dev cmake g++ gcc binutils libx11-dev libxpm-dev libxft-dev libxext-dev tar gfortran subversion
!install root_numpy # optional if you want to convert Trees to numpy arrays and other things like that

import sys
sys.path.append("/content/root_build/")
sys.path.append("/content/root_build/bin/")
sys.path.append("/content/root_build/include/")
sys.path.append("/content/root_build/lib/")
import ctypes
ctypes.cdll.LoadLibrary('/content/root_build/lib//libCore.so')
ctypes.cdll.LoadLibrary('/content/root_build/lib//libThread.so')
ctypes.cdll.LoadLibrary('/content/root_build/lib//libTreePlayer.so')

import ROOT

!pip3 install cv
from matplotlib import pyplot as plt

import cv2
im = cv2.imread("interf2.JPG")
print(type(im))

red_channel = im[:,:,1]
norm = red_channel / red_channel.max()
plt.imshow(norm)
cnv = 0.00626 #pixel / cm

h = ROOT.TH2D("h","Figura di interferenza",100, 0., 3.5, 100, 0., 3.5)

for i in range(norm.shape[0]):
  for j in range(norm.shape[1]):

    h.Fill(i * cnv, j * cnv, norm[i,j] / max)

c = ROOT.TCanvas("myCanvasName","The Canvas Title",800,600)
h.Draw()
c.Draw()

h3 = h.ProfileY("h3", 25, 35)

c2 = ROOT.TCanvas("myCanvasName2","The Canvas Title",800,600)
h3.GetXaxis().SetTitle("Asse X [cm]")
h3.GetYaxis().SetTitle("Intensita' luminosa relativa sul canale del rosso")
h3.Draw()
c2.Draw()

f = ROOT.TFile("./pattern.root", "RECREATE")
h.Write("Pattern")
h3.Write("Projection")
f.Close()

